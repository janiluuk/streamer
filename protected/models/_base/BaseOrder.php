<?php

/**
 * This is the model base class for the table "order".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Order".
 *
 * Columns in table "order" available as properties of the model,
 * followed by relations of table "order" available as properties of the model.
 *
 * @property integer $id
 * @property string $email
 * @property string $code
 * @property string $valid_from
 * @property string $valid_to
 * @property integer $channel_id
 * @property integer $payment_type
 * @property string $amount
 * @property string $created_at
 * @property integer $price_class_id
 * @property string $transaction_data
 * @property integer $status
 *
 * @property Channel $channel
 * @property Priceclass $priceClass
 */
abstract class BaseOrder extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'order';
    }

    public static function representingColumn() {
        return 'email';
    }

    public function rules() {
        return array(
            array('email, code, valid_from, channel_id, payment_type, amount, price_class_id', 'required'),
            array('channel_id, payment_type, price_class_id, status', 'numerical', 'integerOnly'=>true),
            array('email', 'length', 'max'=>255),
            array('code', 'length', 'max'=>64),
            array('amount', 'length', 'max'=>4),
            array('valid_to, created_at', 'safe'),
            array('valid_to, created_at, status', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, email, code, valid_from, valid_to, channel_id, payment_type, amount, created_at, price_class_id, transaction_data, status', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
            'channel' => array(self::BELONGS_TO, 'Channel', 'channel_id'),
            'priceclass' => array(self::BELONGS_TO, 'Priceclass', 'price_class_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'id' => Yii::t('app', 'ID'),
                'email' => Yii::t('app', 'E-mail'),
                'code' => Yii::t('app', 'Koodi'),
                'valid_from' => Yii::t('app', 'Voimassa alkaen'),
                'valid_to' => Yii::t('app', 'Voimassa asti'),
                'channel_id' => Yii::t('app', 'Kanava'),
                'payment_type' => Yii::t('app', 'Maksutyyppi'),
                'amount' => Yii::t('app', 'Summa'),
                'created_at' => Yii::t('app', 'PVM'),
                'price_class_id' => Yii::t('app', 'Hintaluokka'),
                'transaction_data' => Yii::t('app', 'Tapahtuman sisältö'),
                'status' => Yii::t('app', 'Tila'),
                'channel' => null,
                'priceclass' => null,
        );
    }

    public function search($channel="") {
        $criteria = new CDbCriteria;

	if (!empty($channel)) $criteria->compare('channel_id', $channel);

        $criteria->compare('id', $this->id);
        $criteria->compare('email', $this->email, true);
        $criteria->compare('code', $this->code, true);
        $criteria->compare('valid_from', $this->valid_from, true);
        $criteria->compare('valid_to', $this->valid_to, true);
        $criteria->compare('channel_id', $this->channel_id);
        $criteria->compare('payment_type', $this->payment_type);
        $criteria->compare('amount', $this->amount, true);
        $criteria->compare('created_at', $this->created_at, true);
        $criteria->compare('price_class_id', $this->price_class_id);
        $criteria->compare('transaction_data', $this->transaction_data, true);
        $criteria->compare('status', $this->status);
	$sort = new CSort;
	$sort->defaultOrder = "id desc";

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
	    'sort' => $sort
        ));
    }

    public function behaviors() {
        return array_merge(array(
            'CTimestampBehavior' => array(
                'class' => 'zii.behaviors.CTimestampBehavior',
                'createAttribute' => 'created_at',
                'updateAttribute' => null,
                'timestampExpression' => new CDbExpression('NOW()'),
            )
        ), parent::behaviors());
    }
}