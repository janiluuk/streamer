<?php

/**
 * This is the model base class for the table "channel".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Channel".
 *
 * Columns in table "channel" available as properties of the model,
 * followed by relations of table "channel" available as properties of the model.
 *
 * @property integer $id
 * @property string $name
 * @property string $user_id
 * @property string $identifier
 * @property integer $active
 * @property string $background_color
 * @property integer $background_style
 * @property integer $background_image
 * @property integer $channel_style
 * @property string $updated_at
 * @property string $created_at
 *
 * @property MediaImage $backgroundImage
 * @property User $user
 */
abstract class BaseChannel extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }
    
    public function tableName() {
        return 'channel';
    }

    public static function representingColumn() {
        return 'name';
    }

    public function rules() {
        return array(
            array('name, user_id, identifier, active', 'required'),
            array('active, background_style, background_image, channel_style', 'numerical', 'integerOnly'=>true),
            array('name', 'length', 'max'=>128),
            array('user_id', 'length', 'max'=>10),
            array('identifier', 'length', 'max'=>64),
            array('background_color', 'length', 'max'=>6),
            array('created_at', 'safe'),
            array('background_image, created_at', 'default', 'setOnEmpty' => true, 'value' => null),
            array('name, user_id, identifier, active, background_color, background_style, background_image, channel_style, updated_at, created_at', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
            'backgroundImage' => array(self::BELONGS_TO, 'Image', 'background_image'),
            'user' => array(self::BELONGS_TO, 'YumUser', 'user_id'),
            'playlist' => array(self::BELONGS_TO, 'Playlist', 'playlist_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'id' => Yii::t('app', 'ID'),
                'name' => Yii::t('app', 'Nimi'),
               'user_id' => Yii::t('app', 'Käyttäjä'),
                'identifier' => Yii::t('app', 'Tunniste'),
                'active' => Yii::t('app', 'Aktiivinen'),
                'background_color' => Yii::t('app', 'Taustaväri'),
                'color' => Yii::t('app', 'Väri'),
                'background_style' => Yii::t('app', 'Taustan tyyli'),
                'background_image' => Yii::t('app', 'Taustakuva'),
		'status' => 'Tila',
                'channel_style' => Yii::t('app', 'Kanavan tyyli'),
                'updated_at' => Yii::t('app', 'Muokattu'),
                'created_at' => Yii::t('app', 'Luotu'),
                'backgroundImage' => null,
                'user' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('name', $this->name, true);
        $criteria->compare('user_id', $this->user_id);
        $criteria->compare('identifier', $this->identifier, true);
        $criteria->compare('active', $this->active);
        $criteria->compare('background_color', $this->background_color, true);
        $criteria->compare('background_style', $this->background_style);
        $criteria->compare('background_image', $this->background_image);
        $criteria->compare('channel_style', $this->channel_style);
        $criteria->compare('updated_at', $this->updated_at, true);
        $criteria->compare('created_at', $this->created_at, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
            'CTimestampBehavior' => array(
                'class' => 'zii.behaviors.CTimestampBehavior',
                'createAttribute' => 'created_at',
                'updateAttribute' => 'updated_at',
                'timestampExpression' => new CDbExpression('NOW()'),
            )
        ), parent::behaviors());
    }
}