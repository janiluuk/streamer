<?php

/**
 * This is the model base class for the table "media_video".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Video".
 *
 * Columns in table "media_video" available as properties of the model,
 * followed by relations of table "media_video" available as properties of the model.
 *
 * @property integer $id
 * @property string $title
 * @property string $filesize
 * @property string $filename
 * @property string $filepath
 * @property string $created_at
 * @property string $updated_at
 * @property integer $language_id
 * @property integer $type
 * @property integer $bitrate
 * @property integer $framerate
 * @property string $video_container
 * @property string $video_codec
 * @property string $audio_codec
 * @property string $audio_samplerate
 * @property integer $video_width
 * @property integer $video_height
 * @property string $length
 * @property string $profile
 * @property string $is_primary
 * @property string $primary
 * @property integer $deleted
 * @property string $user_id
 *
 * @property MediaPlaylistItem[] $mediaPlaylistItems
 * @property User $user
 */
abstract class BaseVideo extends AweActiveRecord {

  public $user_search;

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }


    public function getBitrates() {

      return array("800", "2000");

    }
    
    public function getAllFiles() {

      foreach ($this->getBitrates() as $br) {
	$file = $this->filepath;
	$dir = dirname($file) . "/" . $br . "/";
	$brfile = $dir . str_replace(".mp4", "-".$br.".mp4",basename($file));
	if (file_exists($brfile)) $files[] = $brfile;

      }
      
      if (file_exists($this->filepath)) $files[] = $brfile;
      return (array)$files;
    }
    public function tableName() {
        return 'media_video';
    }

    public static function representingColumn() {
        return 'created_at';
    }

    public function rules() {
        return array(
            array('user_id', 'required'),
            array('language_id, type, bitrate, framerate, video_width, video_height, deleted', 'numerical', 'integerOnly'=>true),
            array('filesize', 'length', 'max'=>20),
            array('video_container', 'length', 'max'=>8),
            array('video_codec, audio_codec, audio_samplerate', 'length', 'max'=>45),
            array('length', 'length', 'max'=>16),
            array('profile, is_primary, primary', 'length', 'max'=>1),
            array('user_id', 'length', 'max'=>10),
            array('title, filename, filepath,status', 'safe'),
            array('title, filesize, filename, filepath, status, language_id, type, bitrate, framerate, video_container, video_codec, audio_codec, audio_samplerate, video_width, video_height, length, profile, is_primary, primary, deleted', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, user_search, title, filesize, filename, filepath, created_at, updated_at, language_id, type, bitrate, framerate, video_container, video_codec, audio_codec, audio_samplerate, video_width, video_height, length, profile, is_primary, primary, deleted, user_id', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
		     'Items' => array(self::HAS_MANY, 'PlaylistItem', 'video_id', 'order' => 'PlaylistItem.order'),
		     'user' => array(self::BELONGS_TO, 'YumUser', 'user_id'),
	    
        );
    }
    public function scopes() {

      return array("ready" => array(
				    'condition'=>'t.status = 2',
				    ));

    }
    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'id' => Yii::t('app', 'ID'),
                'title' => Yii::t('app', 'Nimi'),
                'filesize' => Yii::t('app', 'Koko'),
                'filename' => Yii::t('app', 'Tiedostonimi'),
                'filepath' => Yii::t('app', 'Tiedostopolku'),
                'created_at' => Yii::t('app', 'Luotu'),
                'user_search' => Yii::t('app', 'Käyttäjä'),
                'updated_at' => Yii::t('app', 'Muokattu'),
                'language_id' => Yii::t('app', 'Kieli'),
                'type' => Yii::t('app', 'Tyyppi'),
                'bitrate' => Yii::t('app', 'Bitrate'),
                'framerate' => Yii::t('app', 'Framerate'),
                'video_container' => Yii::t('app', 'Video Container'),
                'video_codec' => Yii::t('app', 'Video Codec'),
                'audio_codec' => Yii::t('app', 'Audio Codec'),
                'audio_samplerate' => Yii::t('app', 'Audio Samplerate'),
                'video_width' => Yii::t('app', 'Leveys'),
                'video_height' => Yii::t('app', 'Korkeus'),
		'length' => Yii::t('app', 'Pituus'),
                'profile' => Yii::t('app', 'Laatu'),
		'status' => 'Tila',
                'is_primary' => Yii::t('app', 'Is Primary'),
                'primary' => Yii::t('app', 'Primary'),
                'deleted' => Yii::t('app', 'Deleted'),
                'user_id' => Yii::t('app', 'User'),
                'mediaPlaylistItems' => null,
                'user' => null,
        );
    }

    public function search($status="") {
      $criteria = new CDbCriteria;
      $user = Yii::app()->user->data()->id;

      $criteria->with = array('user');
      if (!empty($status)) $this->status = $status;

      $criteria->compare( 'user.username', $this->user_search, true );
      
      $criteria->compare('id', $this->id);
        $criteria->compare('title', $this->title, true);
        $criteria->compare('filesize', $this->filesize, true);
        $criteria->compare('filename', $this->filename, true);
        $criteria->compare('filepath', $this->filepath, true);
        $criteria->compare('created_at', $this->created_at, true);
        $criteria->compare('updated_at', $this->updated_at, true);
        $criteria->compare('language_id', $this->language_id);
        $criteria->compare('type', $this->type);
        $criteria->compare('bitrate', $this->bitrate);
        $criteria->compare('framerate', $this->framerate);
        $criteria->compare('video_container', $this->video_container, true);
        $criteria->compare('video_codec', $this->video_codec, true);
        $criteria->compare('audio_codec', $this->audio_codec, true);
        $criteria->compare('audio_samplerate', $this->audio_samplerate, true);
        $criteria->compare('t.status', $this->status, true);
        $criteria->compare('video_width', $this->video_width);
        $criteria->compare('video_height', $this->video_height);
        $criteria->compare('length', $this->length, true);
        $criteria->compare('user_id', $user);
	$sort = new CSort;
	$sort->defaultOrder = "t.id desc";
	$sort->attributes = array(
			    'user_search'=>array(
						   'asc'=>'user.username',
						   'desc'=>'user.username DESC',
						   ),
			    '*');
        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
	    'sort' => $sort
        ));
    }

    public function onBeforeDelete() {
      $files = $this->getAllFiles();
      
      foreach ((array)$files as $file) {
	if (is_file($file)) shell_exec("rm -f \"" . $file . "\"");
      }


    }
    public function behaviors() {
        return array_merge(array(
            'CTimestampBehavior' => array(
                'class' => 'zii.behaviors.CTimestampBehavior',
                'createAttribute' => 'created_at',
                'updateAttribute' => 'updated_at',
                'timestampExpression' => new CDbExpression('NOW()'),
            )
        ), parent::behaviors());
    }
}