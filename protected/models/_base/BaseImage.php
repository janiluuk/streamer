<?php

/**
 * This is the model base class for the table "media_image".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Image".
 *
 * Columns in table "media_image" available as properties of the model,
 * followed by relations of table "media_image" available as properties of the model.
 *
 * @property integer $id
 * @property string $title
 * @property string $filesize
 * @property string $filename
 * @property string $filepath
 * @property string $created_at
 * @property string $updated_at
 * @property string $image_type
 * @property integer $width
 * @property integer $height
 * @property string $mimetype
 * @property string $size
 * @property integer $vod_id
 * @property integer $is_primary
 * @property integer $deleted
 *
 * @property Channel[] $channels
 */
abstract class BaseImage extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'media_image';
    }

    public static function representingColumn() {
        return 'created_at';
    }

    public function rules() {
        return array(
            array('vod_id', 'required'),
            array('width, height, vod_id, is_primary, deleted', 'numerical', 'integerOnly'=>true),
            array('title', 'length', 'max'=>96),
            array('filesize', 'length', 'max'=>10),
            array('filename', 'length', 'max'=>192),
            array('filepath', 'length', 'max'=>255),
            array('image_type', 'length', 'max'=>16),
            array('mimetype', 'length', 'max'=>32),
            array('size', 'length', 'max'=>24),
            array('title, filesize, filename, filepath, image_type, width, height, mimetype, size, is_primary, deleted', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, title, filesize, filename, filepath, created_at, updated_at, image_type, width, height, mimetype, size, vod_id, is_primary, deleted', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
            'channels' => array(self::HAS_MANY, 'Channel', 'background_image'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'id' => Yii::t('app', 'ID'),
                'title' => Yii::t('app', 'Title'),
                'filesize' => Yii::t('app', 'Filesize'),
                'filename' => Yii::t('app', 'Filename'),
                'filepath' => Yii::t('app', 'Filepath'),
                'created_at' => Yii::t('app', 'Created At'),
                'updated_at' => Yii::t('app', 'Updated At'),
                'image_type' => Yii::t('app', 'Image Type'),
                'width' => Yii::t('app', 'Width'),
                'height' => Yii::t('app', 'Height'),
                'mimetype' => Yii::t('app', 'Mimetype'),
                'size' => Yii::t('app', 'Size'),
                'vod_id' => Yii::t('app', 'Vod'),
                'is_primary' => Yii::t('app', 'Is Primary'),
                'deleted' => Yii::t('app', 'Deleted'),
                'channels' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('title', $this->title, true);
        $criteria->compare('filesize', $this->filesize, true);
        $criteria->compare('filename', $this->filename, true);
        $criteria->compare('filepath', $this->filepath, true);
        $criteria->compare('created_at', $this->created_at, true);
        $criteria->compare('updated_at', $this->updated_at, true);
        $criteria->compare('image_type', $this->image_type, true);
        $criteria->compare('width', $this->width);
        $criteria->compare('height', $this->height);
        $criteria->compare('mimetype', $this->mimetype, true);
        $criteria->compare('size', $this->size, true);
        $criteria->compare('vod_id', $this->vod_id);
        $criteria->compare('is_primary', $this->is_primary);
        $criteria->compare('deleted', $this->deleted);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
            'CTimestampBehavior' => array(
                'class' => 'zii.behaviors.CTimestampBehavior',
                'createAttribute' => 'created_at',
                'updateAttribute' => 'updated_at',
                'timestampExpression' => new CDbExpression('NOW()'),
            )
        ), parent::behaviors());
    }
}